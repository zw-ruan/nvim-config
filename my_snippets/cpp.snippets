priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

import datetime
import os

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += '{:s}:        information of {:s}'.format(arg.strip(), arg.strip())
				c = 1
			else:
				snip += '// @param {:s}:        information of {:s}'.format(arg.strip(), arg.strip())
	else:
		#snip.rv = args[0]
		snip.rv += snip.mkline('{:s}:        information of {:s}'.format(args[0].strip(), args[0].strip()))

def dyear():
        """ Returns the current Year in YYYY format
        """
        now = datetime.datetime.now()
        rv=now.year
        return rv

def today():
        """ Returns the current Date in DD-MON-YYYY format
        """
        now = datetime.datetime.now()
        rv=now.strftime("%Y-%m-%d")
        return rv

endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet docs "doc string" b
/**
 * File: ${2:`!p snip.rv=snip.fn`}
 * Author: `!p snip.rv=snip.opt("g:snips_author", "")`
 * Email: `!p snip.rv=snip.opt("g:snips_email", "")`
 * Created: `!p snip.rv=today()`
 * Description: ${1:Enter description of code}
 */

endsnippet

snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet class "class .. (class)"
// Description: 
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/\/ namespace /m}$1${1/.+/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet micro "An entire .h generator" b
#ifndef ${1:`!p snip.rv = snip.basename or "name"`}
#define $1



#endif // $1 
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet


snippet fnc "Basic c++ doxygen function template" b
// Function information here
//
// @param `!p write_docstring_args(t[3],snip)`
//
// @return: info of return
//
${1:ReturnType} ${2:FunctionName}(${3:param})
{
	${0:FunctionBody}
}
endsnippet
# vim:ft=snippets:
